// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Votica.EntityFrameworkCore;

namespace Votica.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(VoticaDbContext))]
    [Migration("20190629153327_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Votica.Domain.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);

                    b.Property<int?>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("Votica.Domain.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnName("creationDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnName("expirationDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("polls");
                });

            modelBuilder.Entity("Votica.Domain.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PollId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("TypeId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("Votica.Domain.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(35)")
                        .HasMaxLength(35);

                    b.HasKey("Id");

                    b.ToTable("questionTypes");
                });

            modelBuilder.Entity("Votica.Domain.User", b =>
                {
                    b.Property<string>("Email")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(90)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnName("salt")
                        .HasColumnType("varchar(16)");

                    b.HasKey("Email");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Votica.Domain.UserAnswer", b =>
                {
                    b.Property<string>("UserEmail");

                    b.Property<int>("AnswerId");

                    b.HasKey("UserEmail", "AnswerId");

                    b.HasIndex("AnswerId");

                    b.ToTable("answersPerUser");
                });

            modelBuilder.Entity("Votica.Domain.Answer", b =>
                {
                    b.HasOne("Votica.Domain.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Votica.Domain.Question", b =>
                {
                    b.HasOne("Votica.Domain.Poll", "Poll")
                        .WithMany("Questions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Votica.Domain.QuestionType", "Type")
                        .WithMany("Questions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Votica.Domain.UserAnswer", b =>
                {
                    b.HasOne("Votica.Domain.Answer", "Answer")
                        .WithMany("UsersAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Votica.Domain.User", "User")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
